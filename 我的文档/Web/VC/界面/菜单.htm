<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>菜单</title>
<style>
<!--

.font        { font-size: 9pt; line-height: 12pt }
-->
</style>
</head>

<body>

<p align="center"><b><font size="7">菜&nbsp;&nbsp;&nbsp; 单</font></b></p>
<p align="center">康&nbsp; 林</p>
<p align="left"><b>右键菜单的建立</b></p>
<table border="0" width="100" id="table1">
	<tr>
		<td>
		<pre>    CMenu menu;
    if (!menu.LoadMenu(IDM_CHAIR))
        return ;
    </pre>
		<pre>    CMenu* pSubMenu = menu.GetSubMenu(0);
    if (!pSubMenu) 
        return ;
    </pre>
		<pre>    // 使第一个菜单项目是默认的(粗体字)
    ::SetMenuDefaultItem(pSubMenu-&gt;m_hMenu, 0, TRUE);
    </pre>
		<pre>    CPoint mouse;
    GetCursorPos(&amp;mouse);
    //::SetForegroundWindow(this-&gt;GetSafeHwnd());	
    ::TrackPopupMenu(pSubMenu-&gt;m_hMenu, 0, mouse.x, mouse.y, 0,
        this-&gt;GetSafeHwnd(), NULL);</pre>
		<p>　</td>
	</tr>
</table>
<p>　</p>
<table  cellSpacing="1" width="85%" border="0">
	<tr>
		<td>
		<p align="left"><b>为什么即使调用EnableMenuItem菜单项后，菜单项还处于禁止状态</b></td>
	</tr>
	<tr>
		<td>需要将CFrameWnd:: 
		m_bAutomenuEnable设置为FALSE，如果该数据成员为TRUE（缺省值），工作框将自动地禁止没有ON_UPDATE_COMMAND_UI或者ON_COMMAND的菜单项。<br>
		//Disable MFC from automatically disabling menu items.<br>
		m_bAuoMenuEnable=FALSE<br>
		//Now enable the menu item.<br>
		CMenu* pMenu=GetMenu ()<br>
		ASSERT_VALID (pMenu)<br>
		pMenu-&gt;EnableMenuItem (ID_MENU_ITEM,MF_BYCOMMAND | MF_ENABLED)</td>
	</tr>
</table>

<table cellSpacing="1" width="85%" border="0">
	<tr>
		<td>
		<p align="left"><b>如何确定顶层菜单所占据的菜单行数</b></td>
	</tr>
	<tr>
		<td>
		这可以通过简单的减法和除法来实现。首先，用户需要计算主框窗口的高度和客户区；其次，从主框窗口的高度中减去客户区、框边界以及标题的高度；最后，除以菜单栏的高度。下例成员函数是一个计算主框菜单所占据的行数的代码实现。<br>
		int CMainFrame:: GetMenuRows ()<br>
		{<br>
		&nbsp;CRect rcFrame,rcClient<br>
		&nbsp;GetWindowRect (rcFrame)<br>
		&nbsp;GetClientRect (rcClient)<br>
		&nbsp;return (rcFrame.Height () -rcClient.Height () - :: 
		GetSystemMetrics(SM_CYCAPTION) - (:: getSystemMetrics(SM_CYFRAME) *2)) / 
		:: GetSystemMetrics(SM_CYMENU)<br>
		}</td>
	</tr>
</table>

<table  cellSpacing="1" width="87%" border="0">
	<tr>
		<td>
		<p align="left"><b>如何给系统菜单添加一个菜单项</b></td>
	</tr>
	<tr>
		<td>给系统菜单添加一个菜单项需要进行下述三个步骤：<br>
		首先，使用Resource Symbols对话（在View菜单中选择Resource 
		Symbols．．．可以显示该对话）定义菜单项ID，该ID应大于0x0F而小于0xF000；<br>
		其次，调用CWnd::GetSystemMenu获取系统菜单的指针并调用CWnd:: 
		Appendmenu将菜单项添加到菜单中。下例给系统菜单添加两个新的<br>
		int CMainFrame:: OnCreate (LPCREATESTRUCT lpCreateStruct)<br>
		{<br>
		&nbsp;…<br>
		&nbsp;//Make sure system menu item is in the right range.<br>
		&nbsp;ASSERT (IDM_MYSYSITEM &amp;0xFFF0)==IDM_MYSYSITEM)<br>
		&nbsp;ASSERT (IDM-MYSYSITEM &lt; 0xf000)<br>
		&nbsp;//Get pointer to system menu.<br>
		&nbsp;CMenu* pSysmenu=GetSystemmenu (FALSE)<br>
		&nbsp;ASSERT_VALID (pSysMenu)<br>
		&nbsp;//Add a separator and our menu item to system menu.<br>
		&nbsp;CString StrMenuItem (_T (&quot;New menu item&quot;))<br>
		&nbsp;pSysMenu-&gt;Appendmenu (MF_SEPARATOR)<br>
		&nbsp;pSysMenu-&gt;AppendMenu (MF_STRING, IDM_MYSYSITEM, strMenuitem)<br>
		&nbsp;…<br>
		}<br>
		现在，选择系统菜单项时用户应进行检测。使用ClassWizard处理WM_SYSCOMMAND消息并检测用户菜单的nID参数：<br>
		void CMainFrame:: OnSysCommand (UINT nID,LPARAM lParam)<br>
		{<br>
		&nbsp;//Determine if our system menu item was selected.<br>
		&nbsp;if ( (nID &amp; 0xFFF0)==IDM_MYSYSITEM)<br>
		&nbsp;{<br>
		&nbsp;//TODO-process system menu item<br>
		&nbsp;}<br>
		&nbsp;else<br>
		&nbsp;CMDIFrameWnd ::OnSysCommand (nID, lParam)<br>
		}<br>
		最后，一个设计良好的UI应用程序应当在系统菜单项加亮时在状态条显示一个帮助信息，这可以通过增加一个包含系统菜单基ID的串表的入口来实现。</td>
	</tr>
</table>

<table  height="57" width="93%" border="0">
	<tr>
		<td width="99%" height="6">
		<p align="left"><b>如何用VC在菜单中增加位图或图标？</b> </td>
	</tr>
	<tr>
		<td width="99%" height="12">
		<pre>我们在使用Windows95时，可以注意到在“开始”组中的菜单项前都有一个图标，而且在Word97中的菜单项前也有一个图标。
这些图标不但让我们清楚地了解到屏幕上的各种工具按钮与各个菜单项之间的联系，而且还增加了应用程序界面的美观。那
么，请问如何用VC在应用程序菜单中增加图标？

MFC的CMenu类有一个成员函数SetMenuItemBitmaps，可以用于往菜单中增加图标。
具体方法如下：
在应用程序的资源文件中添加想要增加的位图，并将其ID命名为IDB_OPEN1和IDB_OPEN2；
在应用程序的视图类中添加CBitmap类的对象，不妨取名为bm_open1和bm_open2。在视图类的构造函数中添加以下代码：
bm_open1.LoadBitmap(IDB_OPEN1)；
bm_open2.LoadBitmap(IDB_OPEN2)；
(函数LoadBitmap用于加载位图到CBitmap类的对象)
在视图类的成员函数OnDraw()中添加以下代码：
CWnd*parent=GetParent()；
CMenu*pmenubar=parent-&gt;GetMenu()；
CMenu*pmenu=pmenubar-&gt;GetSubMenu(2)；
pmenu-&gt;SetMenuItemBitmaps(1，MF_BYPOSITION，&amp;bm_open1，&amp;bm_open2)； 
前三行得到指向菜单的指针，第四行调用函数
SetMenuItemBitmaps往菜单中增加图标，具体参数的含义
可参见有关介绍MFC及其成员函数的书即可。 </pre>
		</td>
	</tr>
</table>

<p>如何在系统快捷菜单中添加一项<br>
见 VC 知识库 25 期的《<strong>用Shell扩展实现源代码统计程序</strong>》</p>

<p><b><a href="工具条/说明.htm#ToolTip提示字符串">在状态栏中的字符串</a></b></p>

</body>

</html>