// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "xq.h"

/////////////////////////////////////////////////////////////////////////////
// CXQ

IMPLEMENT_DYNCREATE(CXQ, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CXQ properties

BOOL CXQ::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CXQ::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

unsigned long CXQ::GetQiPangColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CXQ::SetQiPangColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CXQ::GetTiShiBoxColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CXQ::SetTiShiBoxColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

LPDISPATCH CXQ::GetQiPangPicture()
{
	LPDISPATCH result;
	GetProperty(0x4, VT_DISPATCH, (void*)&result);
	return result;
}

void CXQ::SetQiPangPicture(LPDISPATCH propVal)
{
	SetProperty(0x4, VT_DISPATCH, propVal);
}

long CXQ::GetQiPangLayout()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CXQ::SetQiPangLayout(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CXQ::GetStartSide()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CXQ::SetStartSide(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

short CXQ::GetCurrentSide()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CXQ::SetCurrentSide(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CXQ operations

long CXQ::NextStep()
{
	long result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CXQ::PreviouStep()
{
	long result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CXQ::ReStart()
{
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CXQ::SaveChess(LPCTSTR lpcszFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpcszFileName);
	return result;
}

BOOL CXQ::LoadChess(LPCTSTR lpcszFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpcszFileName);
	return result;
}

BOOL CXQ::LoadChessStart(LPCTSTR lpcszFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpcszFileName);
	return result;
}

void CXQ::QiPangInterconvert()
{
	InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CXQ::Walk(short i, short j)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		i, j);
	return result;
}

void CXQ::InterConvertCoordinate(short x, short y, short* pi, short* pj)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_PI2 VTS_PI2;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 x, y, pi, pj);
}

void CXQ::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
