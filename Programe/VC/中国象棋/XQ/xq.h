#if !defined(AFX_XQ_H__A0A48541_39A6_4BCA_ADFB_6B4A0D72DFEE__INCLUDED_)
#define AFX_XQ_H__A0A48541_39A6_4BCA_ADFB_6B4A0D72DFEE__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CXQ wrapper class

class CXQ : public CWnd
{
protected:
	DECLARE_DYNCREATE(CXQ)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x71ad322, 0x22ba, 0x45bf, { 0x9e, 0x1f, 0x15, 0x4e, 0xfa, 0xf4, 0xe4, 0x2b } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

    //棋子值
	typedef enum {RShuai = 1, RShi = 2, RXiang = 3, RMa = 4, RChe = 5, RPao = 6, RBing = 7,
              NoQiZi = 0, RQi = 1, BQi = -1,
              BShuai = -1, BShi = -2, BXiang = -3, BMa = -4, BChe = -5, BPao = -6, BBing = -7
            } ENUM_QiZi;
	//走棋状态
    typedef enum {RedReadly, RedWalked, BlackReadly, BlackWalked} ENUM_WalkState;
	//棋盘布局
    typedef enum { NoQi = 0, OnlyTopRed = 1, OnlyBottomBlack = 2, SwapRedBetweenBlack = 4,
                   OnlyTopBlack = OnlyTopRed | SwapRedBetweenBlack,
				   OnlyBottomRed = OnlyBottomBlack | SwapRedBetweenBlack,
				   TopRedAndBottomBlack = OnlyTopRed | OnlyBottomBlack,
				   TopBlackAndBottomRed = OnlyTopBlack | OnlyBottomRed | SwapRedBetweenBlack
				   } ENUM_QiPang;

// Attributes
public:
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	unsigned long GetQiPangColor();
	void SetQiPangColor(unsigned long);
	unsigned long GetTiShiBoxColor();
	void SetTiShiBoxColor(unsigned long);
	LPDISPATCH GetQiPangPicture();
	void SetQiPangPicture(LPDISPATCH);
	long GetQiPangLayout();
	void SetQiPangLayout(long);
	long GetStartSide();
	void SetStartSide(long);
	short GetCurrentSide();
	void SetCurrentSide(short);

// Operations
public:
	long NextStep();
	long PreviouStep();
	void ReStart();
	BOOL SaveChess(LPCTSTR lpcszFileName);
	BOOL LoadChess(LPCTSTR lpcszFileName);
	BOOL LoadChessStart(LPCTSTR lpcszFileName);
	void QiPangInterconvert();
	BOOL Walk(short i, short j);
	void InterConvertCoordinate(short x, short y, short* pi, short* pj);
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_XQ_H__A0A48541_39A6_4BCA_ADFB_6B4A0D72DFEE__INCLUDED_)
