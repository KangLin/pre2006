<?xml version="1.0" encoding="GB2312"?> 
<doc>
    <Document name="Taste">
        <ClassName>CTaste</ClassName>
    </Document>
    <class name="CTaste">
        <简述>这个类的文档还没写，你自己试一下吧。</简述>
        <virtual></virtual>
        <BaseCort>obj</BaseCort>
        <file>Taste</file>
        <base>CShow</base>
    </class>
    <Document name="Show">
        <ClassName>CShow</ClassName>
    </Document>
    <class name="CShow">
        <function name="CShow">
            <access>public:</access>
            <prototype>CShow();</prototype>
            <简述>缺省构造函数。</简述>
            <说明>没什么可说明的。</说明>
            <分类>构造与析构</分类>
        </function>
        <function name="~CShow">
            <access>public:</access>
            <prototype>virtual ~CShow();</prototype>
            <简述>析构函数。</简述>
        </function>
        <function name="Serialize">
            <access>public:</access>
            <prototype>virtual void Serialize(CArchive&amp; ar);</prototype>
            <简述>序列化函数，将对象数据定入文档或从文档载入。</简述>
            <参数 name="ar">
                <简述>CArchive的引用。</简述>
                <type>CArchive&amp;</type>
            </参数>
            <说明>这里是随便拷的一些文字，只是用来演示VcExtend处理注释与文档的功能。<br/>&lt;br&gt;&lt;br&gt;启动VC60， 打开Example目录下的Test工程。<br/>&lt;br&gt;&lt;br&gt;这是AppWidzard生成的SDI工程，全部使用缺省选项，只不过加了两个类罢了。<br/>&lt;br&gt;&lt;br&gt;让我们先来看一看。<br/>&lt;br&gt;&lt;br&gt;现在，我们来试一下CodeCleanUp功能。打开CExtend类，以后，我们的讲解都基于这个类。<br/>&lt;br&gt;&lt;br&gt;随便写两个函数的声明，不要使用VC的Add Member Function功能，而是直接在头文件上写。</说明>
            <分类>序列化</分类>
        </function>
        <function name="CreateNewObj">
            <access>public:</access>
            <prototype>CString CreateNewObj(CString Name, int Age);</prototype>
            <简述>新建一个对象</简述>
            <返回>
                <简述>对象的地址。</简述>
                <type>CString</type>
            </返回>
            <参数 name="Name">
                <简述>新对象的名字。</简述>
                <type>CString</type>
            </参数>
            <参数 name="Age">
                <简述>新对象的年龄。</简述>
                <type>int</type>
            </参数>
            <说明>这里是随便拷的一些文字，只是用来演示VcExtend处理注释与文档的功能。<br/>把光标放到你的函数的声明上，点击CodeJump按钮，怎么样？<br/>到了函数体了吧？再点一下CodeJump，又回到声明这边来了。<br/>再看看头文件的下方，注明要R的函数生成了Get函数，注明要W的生成了Set函数，<br/>把光标移到这些函数的上面，点击CodeJump，怎么样？函数体和实现都有了！<br/>再用CodeJump跳回头文件。我们只是走马观花一下，后面会有更详细的说明，<br/>现在先看看另一个主要功能：注释！<br/>&lt;br&gt;&lt;br&gt;把光标在一个函数的声明上，点击Comment按钮，函数上方会出来一个注释模板。<br/>先不管这些注释项是否符合你的要求，如果需要，你可以修改的，以后再说。<br/>&lt;br&gt;&lt;br&gt;在各注释项上填一些内容，最好不要填垃圾文字，不想写的话，从别的地方拷一些也行，<br/>比如说就从这篇说明书上拷一些文字。</说明>
            <分类>对象建立</分类>
        </function>
        <function name="GetName">
            <access>public:</access>
            <prototype>CString GetName() const;</prototype>
            <简述>返回小猫的名字。</简述>
            <返回>
                <简述>小猫的名字。</简述>
                <type>CString</type>
            </返回>
            <分类>数据读写</分类>
        </function>
        <function name="SetName">
            <access>public:</access>
            <prototype>void SetName(const CString&amp; Name);</prototype>
            <简述>设置小猫的名字。</简述>
            <参数 name="Name">
                <简述>小猫的名字。</简述>
                <type>const CString&amp;</type>
            </参数>
        </function>
        <function name="GetAge">
            <access>public:</access>
            <prototype>int GetAge() const;</prototype>
            <简述>返回小猫的年龄。</简述>
            <返回>
                <简述>小猫的年龄。</简述>
                <type>int</type>
            </返回>
        </function>
        <function name="SetAge">
            <access>public:</access>
            <prototype>void SetAge(int Age);</prototype>
            <简述>设置小猫的年龄。</简述>
            <参数 name="Age">
                <简述>小猫的年龄。</简述>
                <type>int</type>
            </参数>
        </function>
        <function name="GetAddr">
            <access>public:</access>
            <prototype>CString GetAddr() const;</prototype>
            <简述>返回小猫的家庭地址。</简述>
            <返回>
                <简述>小猫的家庭地址。</简述>
                <type>CString</type>
            </返回>
        </function>
        <function name="GetDoc">
            <access>public:</access>
            <prototype>CDocument* GetDoc();</prototype>
            <简述>返回文档指针。</简述>
            <返回>
                <简述>文档指针。</简述>
                <type>CDocument*</type>
            </返回>
        </function>
        <function name="SetDoc">
            <access>public:</access>
            <prototype>void SetDoc(CDocument* Doc);</prototype>
            <简述>设置文档指针。</简述>
            <参数 name="Doc">
                <简述>文档指针。</简述>
                <type>CDocument*</type>
            </参数>
        </function>
        <function name="GetFile">
            <access>public:</access>
            <prototype>CFile* GetFile();</prototype>
            <简述>返回小猫的文件。</简述>
            <返回>
                <简述>小猫的文件。</简述>
                <type>CFile*</type>
            </返回>
        </function>
        <说明>这些文字是随便贴来当作类注释的，你也将在文档中看到它们。<br/>&lt;br&gt;&lt;br&gt;VcExtend 扩展了VC6.0的功能，包括函数体批生成、数据接口自动生成，<br/>注释可隐可现，注释自动生成文档等功能，可以大大提高VC的工作效率。<br/>&lt;br&gt;&lt;br&gt;VcExtend使用VC60的扩展宏接口，采用VBScript编写，使用起来跟VC本身<br/>的命令几乎没有区别。VcExtend完全公开源代码，可以无偿使用和修改。<br/>&lt;br&gt;&lt;br&gt;几个主要的命令：<br/>&lt;br&gt;&lt;br&gt;建立新类：生成干净清爽的类框架，代码模板可自由修改。<br/>&lt;br&gt;&lt;br&gt;代码整理：为函数声明生成函数体，为成员变量生成读写接口（包括声明<br/>和实现），将函数体按声明的顺序重排序。这些操作一次性完成，无论你<br/>是新设计一个类还是修改一个类，这个命令都会工作得很好。<br/>&lt;br&gt;&lt;br&gt;注释：生成注释模板，注释可隐藏，函数体可调出头文件写的函数注释进<br/>行阅读和修改。注释自动生成类似于MSDN的文档。文档数据采用XML文件存<br/>储，你可以按照自己的喜好定义显示格式。<br/>&lt;br&gt;&lt;br&gt;注释批处理：显示/隐藏全部详细注释，显示/隐藏注释摘要，自动为数据<br/>接口函数生成注释，文档整理。<br/>&lt;br&gt;&lt;br&gt;还有其他功能，请看VcExtend文档。<br/>&lt;br&gt;&lt;br&gt;有问题或建议请到论坛发表。</说明>
        <virtual>virtual void Serialize(CArchive&amp; ar);</virtual>
        <简述>这是一个演示类，演示VcExtend的主要功能。你可以看到，代码非常的清爽。<br/>VcExtend有很好的代码生成功能，对注释的处理也很具创意，自动生成的文档相当漂<br/>亮，希望你能喜欢。</简述>
        <BaseCort>CObject</BaseCort>
        <file>Show</file>
        <base>CObject</base>
    </class>
	<ProjectName>Demo</ProjectName>
</doc>